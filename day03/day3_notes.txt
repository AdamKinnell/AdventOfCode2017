
# Numbers
37 36  35  34  33  32 31
38 17  16  15  14  13 30
39 18   5   4   3  12 29
40 19   6   1   2  11 28
41 20   7   8   9  10 27
42 21  22  23  24  25 26
43 44  45  46  47  48 49

# Distances (from center)
6  5  4  3  4  5  6
5  2  3  2  3  4  5
4  3  2  1  2  3  4
3  2  1  0  1  2  3
4  3  2  1  2  3  4
5  4  3  2  3  4  5
6  5  4  3  4  5  6

perimeter = prev_side_length * 4 + 4
perimeter = prev_perimiter + 8

y = 0-based ring#
side length = 2y + 1
perimeter = (4 * side length) - 4
          = (4 * (2y + 1)) - 4
          = 8y + 4 - 4
          = 8y, except for y=0 --> 1
area = largest number = (2y + 1)^2

side lengths    = 1, 3, 5,  7
perimeters      = 1, 8, 16, 24
highest numbers = 1, 9, 25, 49

highest number at bottom-right
lowest number above bottom-right

+ determine ring#
	1 at center

	# Vers. 1
	loop for y >= 0:
		if x <= (2y + 1)^2:
			x in ring# y

    # Vers. 2
    ring# = (sqrt(x) - 1) / 2     # Round up or away from zero

+ determine corner values of ring
	- bottom-right = 2y^2
	               = 2y^2 - 0y-0
	- bottom-left  = 2y^2 - 2y-1
	- top-left     = 2y^2 - (2y-1) - (2y-1)
	               = 2y^2 - 2(2y-1)
	               = 2y^2 - 4y-2
	- top-right    = 2y^2 - (2y-1) - (2y-1) - (2y-1)
	               = 2y^2 - 6y-3

	# Example
	ring = 3
	31 -> 2.283882181415010961059735649459
	31-0.75 -> 2.25
	37 -> 2.541381265149109844499842122601
	37-1.0  -> 2.50
	43 -> 2.778719262151000326172054998818
	43-0.75 -> 2.75
	49 -> 3.000000000000000000000000000000
	49 - 0.0 = 3.00

	Not linear. Need to try and modify before this can be used generically.
		Issue is that values rage between points perimeter+1, therefore
		not giving us exact values.

+ Find all 4 side-center points of ring

	if x at center on LEFT,TOP sides, then:
		(sqrt(x - 1 + 0.0625) - 1) / 2 =
		+ (y-1) + 0.375, if TOP
		+ (y-1) + 0.625, if LEFT

	Does not work for RIGHT, BOTTOM sides.
	Must use: (sqrt(x - 1 + 0.5 + 0.0625) - 1) / 2 =
		+ (y-1) + 0.125, if RIGHT
		+ (y-1) + 0.875, if BOTTOM

	Not linear. Need to try and modify before this can be used generically.

+ Find distance around the current ring

	# Corners
	0%  = (2(y-1) + 1)^2
	    = (2y-2 + 1)^2
	    = (2y-1)^2
	100 = (2y+1)^2
	    = (2y-1)^2 + 8y
	
	25%  = 0%  + 2y
	50%  = 25% + 2y
	75%  = 50% + 2y
	100% = 75% + 2y

	# Centers
	RIGHT   = 0% + y
	TOP     = RIGHT + 2y
            = 0% + 3y
	LEFT    = TOP + 2y
	        = 0% + 5y
	BOTTOM  = LEFT + 2y
	        = 0% + 7y

	EVEN y -- ODD Y -- EVEN y
	even = max distance from center
	odd  = min distance from center

	doesn't matter which even is closer; same result.

	+ Find distance to nearest odd number
	+ Expand range [0,1] => [0,(y+1)]
		Now we have distance to center of side
	+ i.e. variable x below

+ Find distance from center of any side
	- find all 4 corners
	- find center points on each side
	- find distance to closest center point

+ Find distance from center of grid
	- Given:
		* distance from center of any side
		* ring#

	(ring# - 1) is x coordinate
	(distance from center) is y coordinate

	# Vers. 1
	distance = x + y

